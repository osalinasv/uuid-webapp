---
import { parseId } from '@/lib/parse'
import Details from '@/components/Details.astro'

import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'

const SUBMIT_BTN_CONVERT = 'Convert'
const SUBMIT_BTN_GENERATE = 'Generate'

export type Props = {
  rawValue: string
}

const { rawValue } = Astro.props

const sanitizedValue = rawValue.replace(/\s/g, '')
const parseResult = parseId(sanitizedValue)

const defaultValue = parseResult.valid ? parseResult.value : ''
---

<main id='converter' class='grid max-w-screen-md mx-auto p-4 gap-4'>
  <form
    hx-post='/partials/parse'
    hx-target='#converter'
    hx-swap='outerHTML'
    hx-push-url='true'
    class='grid md:grid-cols-[1fr_auto] items-center gap-2'>
    <Input
      id='rawValue'
      className='h-12 text-lg px-6'
      placeholder='UUID, Oracle RAW(16). Leave empty to generate.'
      defaultValue={defaultValue}
      name='rawValue'
      type='text'
      hx-on={`input: submitBtn.innerText = (event.target.value ? "${SUBMIT_BTN_CONVERT}" : "${SUBMIT_BTN_GENERATE}")`}
    />

    <Button id='submitBtn' className='h-12 text-lg rounded-md px-6 min-w-[12ch]' type='submit'>
      {defaultValue ? SUBMIT_BTN_CONVERT : SUBMIT_BTN_GENERATE}
    </Button>
  </form>

  <!-- prettier-ignore -->
  {
    !parseResult.valid && parseResult.error === 'invalid' && (
      <p role='alert' class='max-w-screen-sm mx-auto px-4 text-sm text-center text-destructive'>
        The value <span class='font-weight-bold'>{rawValue}</span> is not a valid UUID format
      </p>
    )
  }

  {parseResult.valid && <Details rawId={parseResult} />}
</main>
