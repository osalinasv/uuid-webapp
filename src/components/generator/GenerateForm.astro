---
import { GENERATE_COUNT_MIN, GENERATE_COUNT_MAX, ID_TYPE, type IdType } from '@/lib/uuid/generate'

import Input from '@/components/ui/Input.astro'
import Button from '@/components/ui/Button.astro'
import Checkbox from '@/components/ui/Checkbox.astro'
import RadioGroup from '@/components/ui/radio/RadioGroup.astro'
import RadioGroupItem from '@/components/ui/radio/RadioGroupItem.astro'

const OPTIONS_MENU_DEFAULTS = {
  EXPANDED: true,
  TYPE: ID_TYPE.UUID,
} as const

type FormatFlag = {
  name: string
  label: string
  checked?: boolean
}

type FormatOptions = {
  type: IdType
  label: string
  flags: FormatFlag[]
}

const optionsByIdType: FormatOptions[] = [
  {
    type: ID_TYPE.UUID,
    label: 'UUID v4',
    flags: [
      { name: 'uppercase', label: 'UPPERCASE' },
      { name: 'useHyphens', label: 'Use hyphens', checked: true },
      { name: 'encodeBase64', label: 'As Base64' },
    ],
  },
  {
    type: ID_TYPE.ORACLE,
    label: 'Oracle RAW(16)',
    flags: [
      { name: 'wrapHexToRaw', label: 'Use HEXTORAW' },
      { name: 'encodeBase64', label: 'As Base64' },
    ],
  },
]
---

<section class='max-w-screen-sm mx-auto p-4 mb-4'>
  <form hx-get='/partials/generate' hx-target='#generateResult'>
    <div class='flex items-baseline gap-2'>
      <Input
        id='count'
        type='number'
        name='count'
        placeholder='Count'
        required
        min={GENERATE_COUNT_MIN}
        max={GENERATE_COUNT_MAX}
        class='w-[90px]'
        _={`on change set val to my.value
            js(val) return Math.min(Math.max(${GENERATE_COUNT_MIN}, val), ${GENERATE_COUNT_MAX}) end
            then set my.value to it`}
      />
      <Button type='submit'>Generate</Button>
      <Button
        id='generateOptionsBtn'
        type='button'
        variant='ghost'
        aria-expanded={OPTIONS_MENU_DEFAULTS.EXPANDED}
        aria-controls='generateOptions'
        class='inline-flex items-center ml-auto group'
        _='on click call toggleOptionsExpanded()'>
        <span>Options</span>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='24'
          height='24'
          viewBox='0 0 24 24'
          class='-mr-1 group-aria-expanded:rotate-90'
          aria-hidden='true'
          data-icon='ic:outline-arrow-drop-down'>
          <path fill='currentColor' d='m10 17l5-5l-5-5v10z'></path>
        </svg>
      </Button>
    </div>

    <div
      id='generateOptions'
      role='region'
      aria-labelledby='generateOptionsBtn'
      class:list={[
        'grid md:grid-cols-[auto_1fr] rounded-lg border bg-card shadow-sm p-6 mt-2 gap-x-6 gap-y-4',
        { hidden: !OPTIONS_MENU_DEFAULTS.EXPANDED },
      ]}>
      <p class='text-sm font-medium leading-none md:text-right text-muted-foreground'>Type:</p>
      <RadioGroup class='flex flex-wrap gap-3'>
        {
          optionsByIdType.map((options) => (
            <RadioGroupItem
              id={`${options.type}Input`}
              name='type'
              value={options.type}
              checked={OPTIONS_MENU_DEFAULTS.TYPE == options.type}
              _='on change call revealOptionsFieldsetForType(my.value)'>
              {options.label}
            </RadioGroupItem>
          ))
        }
      </RadioGroup>

      <p class='text-sm font-medium leading-none md:text-right text-muted-foreground'>Format:</p>
      {
        optionsByIdType.map((options) => (
          <fieldset
            class='flex flex-wrap items-start gap-x-3 gap-y-2 disabled:hidden'
            aria-required='false'
            data-format-options={options.type}
            disabled={options.type != OPTIONS_MENU_DEFAULTS.TYPE}>
            {options.flags.map((flag) => (
              <Checkbox id={`${options.type}_${flag.name}Input`} name={flag.name} checked={flag.checked}>
                {flag.label}
              </Checkbox>
            ))}
          </fieldset>
        ))
      }
    </div>
  </form>

  <div id='generateResult'>
    <!-- <div class='bg-muted text-muted-foreground rounded-lg p-6'>
      <p class='max-w-[48ch] mx-auto text-center'>
        Generate UUIDs in bulk, expand the options menu to customize the output format
      </p>
    </div> -->
  </div>
</section>

<script type='text/hyperscript'>
  def toggleOptionsExpanded()
    if #generateOptionsBtn[@aria-expanded] is 'true' then
      set #generateOptionsBtn[@aria-expanded] to false
      add .hidden to #generateOptions
    else
      set #generateOptionsBtn[@aria-expanded] to true
      remove .hidden from #generateOptions
    end
  end

  def revealOptionsFieldsetForType(type)
    for fieldset in <fieldset[data-format-options]/>
      set fieldset.disabled to (fieldset[@data-format-options] is not type)
    end
  end
</script>
