---
import { GENERATE_COUNT_MIN, GENERATE_COUNT_MAX, ID_TYPE, OPTIONS_BY_TYPE } from '@/lib/uuid/generate'

import Input from '@/components/ui/Input.astro'
import Button from '@/components/ui/Button.astro'
import Checkbox from '@/components/ui/Checkbox.astro'
import RadioGroup from '@/components/ui/radio/RadioGroup.astro'
import RadioGroupItem from '@/components/ui/radio/RadioGroupItem.astro'

const OPTIONS_MENU_DEFAULTS = {
  EXPANDED: true,
  COUNT: 10,
  TYPE: ID_TYPE.UUID,
} as const
---

<section class="max-w-screen-sm mx-auto p-4 mb-4">
  <form
    hx-get="/partials/generate"
    hx-trigger="submit throttle:200ms"
    hx-target="#generateResult"
    class="mb-2">
    <div class="flex gap-2">
      <Input
        id="count"
        type="number"
        name="count"
        placeholder="Count"
        required
        value={OPTIONS_MENU_DEFAULTS.COUNT}
        min={GENERATE_COUNT_MIN}
        max={GENERATE_COUNT_MAX}
        class="w-[70px] shadow-sm"
        _={`on change set val to my.value
            js(val) return Math.min(Math.max(${GENERATE_COUNT_MIN}, val), ${GENERATE_COUNT_MAX}) end
            then set my.value to it`}
      />

      <Button type="submit" class="shadow-sm">Generate</Button>
      <Button
        id="generateOptionsBtn"
        type="button"
        variant="ghost"
        aria-expanded={OPTIONS_MENU_DEFAULTS.EXPANDED}
        aria-controls="generateOptions"
        class="inline-flex items-center ml-auto group"
        _="on click call toggleOptionsExpanded()">
        <span>Options</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          class="-mr-1 group-aria-expanded:rotate-90 transition-transform"
          aria-hidden="true"
          data-icon="ic:outline-arrow-drop-down">
          <path fill="currentColor" d="m10 17l5-5l-5-5v10z"></path>
        </svg>
      </Button>
    </div>

    <div
      id="generateOptions"
      role="region"
      data-state={OPTIONS_MENU_DEFAULTS.EXPANDED ? 'open' : 'closed'}
      aria-labelledby="generateOptionsBtn"
      class="grid data-[state=open]:grid-rows-[1fr] grid-rows-[0fr] data-[state=closed]:collapse transition-[grid-template-rows]"
      _='on transitionend if @data-state is "closing" then set @data-state to "closed" end'>
      <div class="overflow-hidden">
        <div class="grid md:grid-cols-[auto_1fr] rounded-lg border bg-card shadow p-6 mt-2 gap-x-6 gap-y-4">
          <p class="text-sm font-medium leading-none md:text-right text-muted-foreground">Type:</p>
          <RadioGroup class="flex flex-wrap gap-3">
            {
              OPTIONS_BY_TYPE.map((options) => (
                <RadioGroupItem
                  id={`${options.type}Input`}
                  name="type"
                  value={options.type}
                  checked={OPTIONS_MENU_DEFAULTS.TYPE == options.type}
                  _="on change call revealOptionsFieldsetForType(my.value)">
                  {options.label}
                </RadioGroupItem>
              ))
            }
          </RadioGroup>

          <p class="text-sm font-medium leading-none md:text-right text-muted-foreground">Format:</p>
          {
            OPTIONS_BY_TYPE.map((options) => (
              <fieldset
                class="flex flex-wrap items-start gap-x-3 gap-y-2 disabled:hidden"
                data-format-options={options.type}
                disabled={options.type != OPTIONS_MENU_DEFAULTS.TYPE}>
                {options.flags.map((flag) => (
                  <Checkbox
                    id={`${options.type}_${flag.name}Input`}
                    name={flag.name}
                    checked={flag.checked}
                    value="true">
                    {flag.label}
                  </Checkbox>
                ))}
              </fieldset>
            ))
          }
        </div>
      </div>
    </div>
  </form>

  <div id="generateResult"></div>
</section>

<script type="text/hyperscript">
  def toggleOptionsExpanded()
    if #generateOptionsBtn[@aria-expanded] is 'true' then
      set #generateOptionsBtn[@aria-expanded] to false
      set #generateOptions[@data-state] to 'closing'
    else
      set #generateOptionsBtn[@aria-expanded] to true
      set #generateOptions[@data-state] to 'open'
    end
  end

  def revealOptionsFieldsetForType(type)
    for fieldset in <fieldset[data-format-options]/>
      set fieldset.disabled to (fieldset[@data-format-options] is not type)
    end
  end
</script>
