---
import '@/styles/base.css'
import '@/styles/global.css'

interface Props {
  title: string
}

const { title } = Astro.props
const description = 'Parse, transform, and generate UUIDs in multiple formats'
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <title>{title}</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="generator" content={Astro.generator} />
    <meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1" />

    <meta name="author" content="Omar Salinas" />
    <meta name="content-language" content="en" />
    <meta name="description" content={description} />
    <meta name="keywords" content="uuid, v4, guid, generate, create, parse, transform, oracle, raw, id, tool" />

    <meta property="og:site_name" content="UUID Tools" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content="en_US" />
    <meta property="og:image" content="https://uuid.osalinasv.dev/banner.png" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@osalinasv" />
    <meta name="twitter:creator" content="@osalinasv" />

    <meta name="color-scheme" content="dark light" />
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="white" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="black" />

    <link rel="icon" href="/favicon.svg" />

    <script is:inline src="/scripts/htmx.min.js"></script>
    <script is:inline src="/scripts/hyperscript.min.js"></script>

    <script is:inline>
      if (
        localStorage.theme === 'dark' ||
        (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        document.documentElement.classList.add('dark')
      } else {
        document.documentElement.classList.remove('dark')
      }
    </script>
  </head>
  <body hx-ext="head-support">
    <slot />

    <script is:inline>
      const colorSchemeMedia = window.matchMedia('(prefers-color-scheme: dark)')
      colorSchemeMedia.addEventListener('change', (event) => {
        if (localStorage.theme == undefined) {
          setDarkTheme(event.matches)
        }
      })

      document.addEventListener('cs:themeSelected', (event) => {
        switch (event.detail.theme) {
          case 'default':
            localStorage.removeItem('theme')
            setDarkTheme(colorSchemeMedia.matches)
            break
          case 'light':
            localStorage.theme = 'light'
            setDarkTheme(false)
            break
          default:
            localStorage.theme = 'dark'
            setDarkTheme(true)
        }
      })

      function setDarkTheme(useDarkTheme) {
        if (useDarkTheme) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
      }
    </script>

    <script is:inline>
      //!TEMP: Ignore HTMX's parameter mapping to properly consider disabled fieldsets
      document.body.addEventListener('htmx:configRequest', function (evt) {
        if (evt.target.tagName != 'FORM') return

        const formData = new FormData(evt.target)
        const parameters = Object.fromEntries(formData)

        evt.detail.parameters = parameters
      })
    </script>
  </body>
</html>
